{
  "_from": "node-dht-sensor",
  "_id": "node-dht-sensor@0.3.0",
  "_inBundle": false,
  "_integrity": "sha512-8TRtRTaemgFI4fWZ17erRcPn1/Y/DQGzarwuDBQq2XJc46emhr0t6/Iiu0tcjOloz6osHucFjCRPpQk+Uuxi6w==",
  "_location": "/node-dht-sensor",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-dht-sensor",
    "fetchSpec": "latest",
    "name": "node-dht-sensor",
    "raw": "node-dht-sensor",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-dht-sensor/-/node-dht-sensor-0.3.0.tgz",
  "_shasum": "5d1a068325240d8f7f7791a38403858d8a673348",
  "_spec": "node-dht-sensor",
  "_where": "/home/pi/Desktop/SmartThermostatGUI",
  "author": {
    "name": "David Momenso"
  },
  "bugs": {
    "url": "https://github.com/momenso/node-dht-sensor/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "node-addon-api": "^1.6.3"
  },
  "deprecated": false,
  "description": "Reads data from DHT sensors on Raspberry Pi",
  "devDependencies": {
    "chai": "^4.2.0",
    "mocha": "^6.1.4"
  },
  "files": [
    "/binding.gyp",
    "/lib",
    "/src"
  ],
  "homepage": "https://github.com/momenso/node-dht-sensor#readme",
  "keywords": [
    "AM2302",
    "DHT",
    "DHT11",
    "DHT22",
    "humidity",
    "raspberry",
    "raspberry pi",
    "rpi",
    "sensor",
    "temperature"
  ],
  "license": "LGPL-3.0",
  "main": "./lib",
  "name": "node-dht-sensor",
  "optionalDependencies": {},
  "readme": "# node-dht-sensor\n\nThis a simple node.js module for querying air temperature and relative humidity from a compatible DHT sensor.\n\n[![Build Status](https://travis-ci.org/momenso/node-dht-sensor.svg?branch=master)](https://travis-ci.org/momenso/node-dht-sensor)\n![npm](https://img.shields.io/npm/v/node-dht-sensor.svg?label=npm%20package)\n![npm](https://img.shields.io/npm/dm/node-dht-sensor.svg)\n![GitHub](https://img.shields.io/github/license/momenso/node-dht-sensor.svg)\n\n## Installation\n``` bash\n$ npm install node-dht-sensor\n```\n\nPlease note that differently from version 0.0.x there's no need to pre-install the BCM2835 library [2].\n\n## Usage\n\nTo initialize the sensor, you have to specify the sensor type and the [GPIO pin](https://www.raspberrypi.org/documentation/usage/gpio/) where the sensor is connected to. It should work for DHT11, DHT22 and AM2302 sensors.\n\nYou should use sensorType value to match the sensor as follows:\n\n| Sensor          | sensorType value |\n|-----------------|:----------------:|\n| DHT11           | 11               |\n| DHT22 or AM2302 | 22               |\n\nIf the initialization succeeds when you can call the read function to obtain the latest readout from the sensor. Readout values contains a temperature and a humidity property.\n\n### First Example\n\n![example1](https://cloud.githubusercontent.com/assets/420851/20246902/1a03bafc-a9a8-11e6-8158-d68928b2e79f.png)\n\nThis sample queries a DHT22 sensor connected to the GPIO 4 and prints out the result on the console.\n\n``` javascript\nvar sensor = require('node-dht-sensor');\n\nsensor.read(22, 4, function(err, temperature, humidity) {\n    if (!err) {\n        console.log('temp: ' + temperature.toFixed(1) + '°C, ' +\n            'humidity: ' + humidity.toFixed(1) + '%'\n        );\n    }\n});\n```\n\n### Multiple Sensors Example\n\n![example2](https://cloud.githubusercontent.com/assets/420851/20246914/554d72c4-a9a8-11e6-9162-ae51ecdf4212.png)\n\nThe following example shows a method for querying multiple sensors connected to the same Raspberry Pi. For this example, we have two sensors:\n\n1. A DHT11 sensor connected to GPIO 17\n2. High-resolution DHT22 sensor connected to GPIO 4\n\n``` javascript\nvar sensorLib = require(\"node-dht-sensor\");\n\nvar sensor = {\n    sensors: [ {\n        name: \"Indoor\",\n        type: 11,\n        pin: 17\n    }, {\n        name: \"Outdoor\",\n        type: 22,\n        pin: 4\n    } ],\n    read: function() {\n        for (var a in this.sensors) {\n            var b = sensorLib.read(this.sensors[a].type, this.sensors[a].pin);\n            console.log(this.sensors[a].name + \": \" +\n              b.temperature.toFixed(1) + \"°C, \" +\n              b.humidity.toFixed(1) + \"%\");\n        }\n        setTimeout(function() {\n            sensor.read();\n        }, 2000);\n    }\n};\n\nsensor.read();\n```\n\n### Promises API\n\nPromises API provides an alternative `read` method that returns a Promise object rather than using a callback. The API is accessible via `require('node-dht-sensor').promises`.\n\n```javascript\nvar sensor = require('node-dht-sensor').promises;\n\n// You can use `initialize` and `setMaxTries` just like before\nsensor.setMaxTries(10);\nsensor.initialize(22, 4);\n\n// You can still use the synchronous version of `read`:\n// var readout = sensor.readSync(22, 4);\n\nsensor.read(22, 4).then(\n    function ({ temperature, humidity }) {\n      console.log('temp: ' + temperature.toFixed(1) + '°C, ' +\n          'humidity: ' + humidity.toFixed(1) + '%'\n      );\n    },\n    function (err) {\n        console.error('Failed to read sensor data:', err);\n    }\n);\n```\n\nUsing `async/await`:\n\n```javascript\nconst sensor = require('node-dht-sensor').promises;\n\nasync function do() {\n    try {\n        const { temperature, humidity } = await sensor.read(22, 4);\n        console.log('temp: ' + temperature.toFixed(1) + '°C, ' +\n            'humidity: ' + humidity.toFixed(1) + '%'\n        );\n    } catch (err) {\n        console.error('Failed to read sensor data:', err);\n    }\n}\n\ndo();\n```\n\n### Test mode\n\nA *test mode* of operation is available since version `0.2.0`. In this mode of operation, the library does not communicate with the sensor hardware via the **GPIO** but instead it returns a pre-configured readout value. You can use the test mode during development without the need to have an actual sensor connected.\n\nTo enable the *test mode*, fake values must be defined at initialization. In the example below we specify fixed values for temperature equal to 21&deg;C and humidity equal to 60%.\n\n```javascript\nsensor.initialize({\n    test : {\n        fake: {\n            temperature: 21,\n            humidity: 60\n        }\n    }\n});\n```\n\nAfter initialization, we can call the `read` method as usual.\n\n```javascript\nsensor.read(22, 4, function(err, temperature, humidity) {\n    if (!err) {\n        console.log('temp: ' + temperature.toFixed(1) + '°C, ' +\n            'humidity: ' + humidity.toFixed(1) + '%'\n        );\n    }\n});\n```\nAnd the result will always be the configured readout value defined at initialization.\n\n```console\n$ node examples/fake-test.js\ntemp: 21.0°C, humidity: 60.0%\n$ node examples/fake-test.js\ntemp: 21.0°C, humidity: 60.0%\n```\n\nYou can find a complete source code example in [examples/fake-test.js](https://github.com/momenso/node-dht-sensor/blob/master/examples/fake-test.js).\n\n\n### Reference for building from source\n\nStandard node-gyp commands are used to build the module. So, just make sure you have node and node-gyp as well as the Broadcom library to build the project.\n\n1. In case, you don't have node-gyp, install it first:\n   ``` bash\n   $ sudo npm install -g node-gyp\n   $ sudo update-alternatives --install /usr/bin/node-gyp node-gyp /opt/node-v10.15.3-linux-armv7l/bin/node-gyp 1\n   ```\n\n2. Generate the configuration files\n   ``` bash\n   $ node-gyp configure\n   ```\n\n3. Build the component\n   ``` bash\n   $ node-gyp build\n   ```\n\n### Tracing and Debugging\n\nVerbose output from the module can be enabled by by specifying the ```--dht_verbose=true``` flag when installing the node via npm.\n\n``` bash\n$ npm install node-dht-sensor --dht_verbose=true\n```\n\nif you are interested in enabling trace when building directly from source you can enable the ```-Ddht_verbose``` flag when running node-gyp configure.\n\n``` bash\n$ node-gyp configure -- -Ddht_verbose=true\n```\n### Appendix A: Quick Node.js installation guide\n\nThere are many ways you can get Node.js installed on your Raspberry Pi. Here is just one of way you can do it.\n``` bash\n$ wget https://nodejs.org/dist/v10.15.3/node-v10.15.3-linux-armv7l.tar.xz\n$ tar xvfJ node-v10.15.3-linux-armv7l.tar.xz\n$ sudo mv node-v10.15.3-linux-armv7l /opt\n$ sudo update-alternatives --install /usr/bin/node node /opt/node-v10.15.3-linux-armv7l/bin/node 1\n$ sudo update-alternatives --set node /opt/node-v10.15.3-linux-armv7l/bin/node\n$ sudo update-alternatives --install /usr/bin/npm npm /opt/node-v10.15.3-linux-armv7l/bin/npm 1\n```\nPlease note that you may have to use armv6l instead of arm7l if you have an early Raspberry Pi model.\n\n### References\n\n[1]: Node.js download - https://nodejs.org/en/download/\n\n[2]: BCM2835 - http://www.airspayce.com/mikem/bcm2835/\n\n[3]: Node.js native addon build tool - https://github.com/TooTallNate/node-gyp\n\n[4]: GPIO: Raspbery Pi Models A and B - https://www.raspberrypi.org/documentation/usage/gpio/\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/momenso/node-dht-sensor.git"
  },
  "scripts": {
    "install": "node-gyp configure",
    "postinstall": "node-gyp build",
    "test": "mocha"
  },
  "version": "0.3.0"
}
